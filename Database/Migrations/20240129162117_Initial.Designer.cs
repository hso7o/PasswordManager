// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(PasswordManagerDBContext))]
    [Migration("20240129162117_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("PasswordManager_DB")
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Database.Entities.Password", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(8);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(7);

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(5);

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Password_Mst", "PasswordManager_DB");
                });

            modelBuilder.Entity("Database.Entities.PasswordOptions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("AllowLowercaseCharacters")
                        .HasColumnType("bit")
                        .HasColumnOrder(3);

                    b.Property<bool>("AllowOtherCharacters")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<bool>("AllowSpaceCharacters")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.Property<bool>("AllowSpecialCharacters")
                        .HasColumnType("bit")
                        .HasColumnOrder(4);

                    b.Property<bool>("AllowUnderscoreCharacters")
                        .HasColumnType("bit")
                        .HasColumnOrder(5);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaximumCharacters")
                        .HasColumnType("int")
                        .HasColumnOrder(16);

                    b.Property<int>("MinimumCharacters")
                        .HasColumnType("int")
                        .HasColumnOrder(15);

                    b.Property<bool>("RequireLowercaseCharacters")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("RequireNumberCharacters")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<bool>("RequireOtherCharacters")
                        .HasColumnType("bit")
                        .HasColumnOrder(14);

                    b.Property<bool>("RequireSpaceCharacters")
                        .HasColumnType("bit")
                        .HasColumnOrder(13);

                    b.Property<bool>("RequireSpecialCharacters")
                        .HasColumnType("bit")
                        .HasColumnOrder(11);

                    b.Property<bool>("RequireUnderscoreCharacters")
                        .HasColumnType("bit")
                        .HasColumnOrder(12);

                    b.Property<bool>("RequireUppercaseCharacters")
                        .HasColumnType("bit")
                        .HasColumnOrder(9);

                    b.Property<long>("SettingsId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SettingsId")
                        .IsUnique();

                    b.ToTable("PasswordOptions_Dtl", "PasswordManager_DB");
                });

            modelBuilder.Entity("Database.Entities.Settings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("CopyPasswordColumn")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateTimeFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<bool>("ShowEmailColumn")
                        .HasColumnType("bit")
                        .HasColumnOrder(4);

                    b.Property<bool>("ShowPasswordColumn")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.Property<bool>("ShowUsernameColumn")
                        .HasColumnType("bit")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Settings_Mst", "PasswordManager_DB");
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsMobileNumberVerified")
                        .HasColumnType("bit")
                        .HasColumnOrder(9);

                    b.Property<string>("Master")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(6);

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserLoginPassword")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(5);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.ToTable("User_Mst", "PasswordManager_DB");
                });

            modelBuilder.Entity("Database.Entities.Password", b =>
                {
                    b.HasOne("Database.Entities.User", "User")
                        .WithMany("Passwords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Entities.PasswordOptions", b =>
                {
                    b.HasOne("Database.Entities.Settings", "Settings")
                        .WithOne("PasswordOptions")
                        .HasForeignKey("Database.Entities.PasswordOptions", "SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Database.Entities.Settings", b =>
                {
                    b.HasOne("Database.Entities.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("Database.Entities.Settings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Entities.Settings", b =>
                {
                    b.Navigation("PasswordOptions")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.Navigation("Passwords");

                    b.Navigation("Settings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
